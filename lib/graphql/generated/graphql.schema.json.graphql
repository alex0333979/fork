# This file was generated based on "graphql.schema.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type BillingAddress {
    address1: String!
    address2: String
    city: String!
    country: String!
    email: String!
    firstName: String!
    lastName: String!
    phone: String!
    postalCode: String!
    state: String!
}

type BillingAddressResponse {
    data: BillingAddress
    message: String!
    status: Boolean!
}

type Cart {
    billingAddress: BillingAddress
    items: [CartItem!]
    promoCode: String
    shippingAddress: ShippingAddress
    shippingType: ShippingType!
}

type CartItem {
    createdAt: DateTime
    description: String!
    id: ID!
    imageUrl: String
    isComplete: Boolean!
    name: String!
    price: Float!
    product: ProductType!
    productId: ID!
    updatedAt: DateTime
}

type CartResponse {
    data: Cart
    message: String!
    status: Boolean!
}

type CheckPhotoResponse {
    data: TestResult
    message: String!
    status: Boolean!
}

type CountriesResponse {
    data: [Country!]!
    total: Float!
}

type Country {
    country: String!
    id: Int!
    type: String!
}

type Dictionary {
    message: String!
    test: String!
}

type Dimensions {
    height: Float!
    unit: String!
    width: Float!
}

type Entry {
    completeStep: Int!
    createdAt: DateTime!
    currentStep: Int!
    form: Form!
    formId: ID!
    id: ID!
    isComplete: Boolean!
    updatedAt: DateTime!
    userId: ID!
}

type EntryPaginatedResponse {
    data: [Entry!]!
    total: Float!
}

type EntryResponse {
    data: Entry
    message: String!
    status: Boolean!
}

type Eye {
    position: Position!
}

type Form {
    description: String!
    id: ID!
    name: String!
    steps: [FormStep!]!
}

type FormField {
    defaultValue: Value
    disabled: Boolean
    hidden: Boolean
    index: Float
    name: String!
    notes: String
    options: [Option!]
    placeholder: String
    required: Boolean
    text: String
    type: FieldType!
    validations: [Validation!]
    value: Value
}

type FormResponse {
    data: Form
    message: String!
    status: Boolean!
}

type FormStep {
    fields: [FormField!]!
    name: String!
    notes: String
    step: Int!
}

type Head {
    Dimensions: Dimensions!
    position: Position!
}

type Mutation {
    AddBillingAddressToCart(billingAddress: BillingAddressInput!): CartResponse!
    AddItemsToCart(items: [CartItemInput!]!): CartResponse!
    AddPromoCodeToCart(promoCode: String!): CartResponse!
    AddShippingAddressToCart(shippingAddress: ShippingAddressInput!): CartResponse!
    CheckPhoto(entryId: String!): CheckPhotoResponse!
    ClearCart: CartResponse!
    CreateGuest: TokenResponse!
    CreateOrder: OrderResponse!
    DeleteOrder(orderId: String!): StringResponse!
    GetPaymentIntent(orderId: String!): PaymentIntentResponse!
    Login(email: String!, password: String!): TokenResponse!
    RemoveItemsFromCart(ids: [ID!]!): CartResponse!
    SendEmailToAdmin(data: EmailToAdminInput!): StringResponse!
    SendOrderConfirmToFulfillmentManually(orderId: String!): StringResponse!
    SendOrderConfirmToUserManually(orderId: String!): StringResponse!
    SetDefaultBillingAddress(billingAddress: BillingAddressInput!): BillingAddressResponse!
    SetDefaultShippingAddress(shippingAddress: ShippingAddressInput!): ShippingAddressResponse!
    SetShippingTypeToCart(shippingType: String!): CartResponse!
    SetTrackingNumber(orderId: String!, trackingNumber: String!): OrderResponse!
    SignUp(user: UserInput!): UserResponse!
    SubmitEntry(entryId: ID, formId: ID!, formStep: FormStepInput!): EntryResponse!
    UpdateCartItemPrice(item: UpdateCartItemPriceInput!): CartResponse!
    UpdateOrderStatus(orderId: String!, orderStatus: OrderStatus!, orderStatusType: OrderStatusType!): OrderResponse!
}

type Option {
    notes: String
    text: String
    value: Value!
}

type Order {
    billingAddress: BillingAddress!
    createdAt: DateTime!
    id: ID!
    items: [CartItem!]!
    orderNumber: Int!
    paymentStatus: PaymentStatus!
    promoCode: String
    shippingAddress: ShippingAddress
    shippingType: ShippingType!
    status: OrderTrack!
    totalPrice: Float!
    trackingNumber: String
    updatedAt: DateTime!
    userId: ID!
}

type OrderPaginatedResponse {
    data: [Order!]!
    total: Float!
}

type OrderResponse {
    data: Order
    message: String!
    status: Boolean!
}

type OrderTrack {
    confirmOrder: TrackStep!
    delivered: TrackStep!
    outForDelivery: TrackStep!
    productPrepared: TrackStep!
    shipped: TrackStep!
}

type PaymentIntent {
    clientSecret: String!
}

type PaymentIntentResponse {
    data: PaymentIntent
    message: String!
    status: Boolean!
}

type Position {
    max: Float!
    min: Float!
    unit: Unit!
}

type Query {
    Cart: CartResponse!
    CompletedOrders(page: Int = 1, pageSize: Int = 20, search: String, skip: Int): OrderPaginatedResponse!
    Countries: CountriesResponse!
    DocumentsByCountry(country: String!): CountriesResponse!
    Entries(page: Int = 1, pageSize: Int = 20, search: String, skip: Int): EntryPaginatedResponse!
    Entry(entryId: String!): EntryResponse!
    Form(id: String!): FormResponse!
    Forms: [Form!]!
    GetSignedUrl: SignedUrlResponse!
    Me: UserResponse!
    Order(orderId: String!): OrderResponse!
    OrderByOrderNumber(orderNumber: Float!): OrderResponse!
    Orders(page: Int = 1, pageSize: Int = 20, search: String, skip: Int): OrderPaginatedResponse!
    OrdersForAdmin(page: Int = 1, pageSize: Int = 20, search: String, skip: Int): OrderPaginatedResponse!
}

type ShippingAddress {
    address1: String!
    address2: String
    city: String!
    country: String!
    email: String!
    firstName: String!
    lastName: String!
    phone: String!
    postalCode: String!
    state: String!
}

type ShippingAddressResponse {
    data: ShippingAddress
    message: String!
    status: Boolean!
}

type SignedUrl {
    signedUrl: String!
    url: String!
}

type SignedUrlResponse {
    data: SignedUrl
    message: String!
    status: Boolean!
}

type Size {
    max: Int!
    min: Int!
}

type StringResponse {
    data: String
    message: String!
    status: Boolean!
}

type TestResult {
    code: Code!
    failed: [Dictionary!]!
    message: String!
    passed: [Dictionary!]!
}

type Token {
    accessToken: String!
}

type TokenResponse {
    data: Token
    message: String!
    status: Boolean!
}

type TrackStep {
    createdAt: DateTime!
    status: OrderStatus!
    updatedAt: DateTime!
}

type User {
    billingAddress: BillingAddress
    cart: Cart
    createdAt: DateTime!
    email: String
    firstName: String
    guest: Boolean!
    id: ID!
    isAdmin: Boolean!
    lastName: String
    phone: String
    shippingAddress: ShippingAddress
    updatedAt: DateTime!
}

type UserResponse {
    data: User
    message: String!
    status: Boolean!
}

type ValidatedImage {
    image: String!
}

type Validation {
    message: String
    type: ValidationType!
    value: Float
}

enum Code {
    Code200
    Code400
    Code500
}

enum FieldType {
    Button
    CheckBox
    CountryPicker
    DatePicker
    Input
    Label
    PhoneInput
    Radio
    Select
    StatePicker
    TextArea
}

enum OrderStatus {
    COMPLETED
    NOT_STARTED
    ON_PROGRESS
    PENDING
}

enum OrderStatusType {
    confirmOrder
    delivered
    outForDelivery
    productPrepared
    shipped
}

enum PaymentStatus {
    COMPLETED
    PENDING
}

enum ProductType {
    PASSPORT_APPLICATION
    PASSPORT_PHOTO
}

enum ShippingType {
    FREE
    FROM1TO2
    FROM3TO3
    FROM3TO6
    NO_SHIPPING
}

enum Unit {
    Inch
    Mm
    Percentage
}

enum ValidationType {
    IsEmail
    IsNumber
    IsPhone
    Max
    MaxLength
    Min
    MinLength
    Nullable
}

input BillingAddressInput {
    address1: String!
    address2: String
    city: String!
    country: String!
    email: String!
    firstName: String!
    lastName: String!
    phone: String!
    postalCode: String!
    state: String!
}

input CartItemInput {
    description: String!
    imageUrl: String
    name: String!
    product: ProductType!
    productId: ID!
}

input EmailToAdminInput {
    email: String!
    name: String!
    phone: String
    question: String!
}

input FormFieldInput {
    defaultValue: Value
    disabled: Boolean
    hidden: Boolean
    index: Float
    name: String!
    notes: String
    options: [OptionInput!]
    placeholder: String
    required: Boolean
    text: String
    type: FieldType!
    validations: [ValidationInput!]
    value: Value
}

input FormStepInput {
    fields: [FormFieldInput!]!
    name: String!
    notes: String
    step: Int!
}

input OptionInput {
    notes: String
    text: String
    value: Value!
}

input ShippingAddressInput {
    address1: String!
    address2: String
    city: String!
    country: String!
    email: String!
    firstName: String!
    lastName: String!
    phone: String!
    postalCode: String!
    state: String!
}

input UpdateCartItemPriceInput {
    itemId: ID!
    price: Int!
}

input UserInput {
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    phone: String!
}

input ValidationInput {
    message: String
    type: ValidationType!
    value: Float
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"Value custom scalar type"
scalar Value